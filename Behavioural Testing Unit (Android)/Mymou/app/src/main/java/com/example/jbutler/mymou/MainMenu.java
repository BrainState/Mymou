package com.example.jbutler.mymou;

import android.Manifest;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.app.PendingIntent;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Handler;
import android.os.HandlerThread;
import android.provider.Settings;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.UUID;

public class MainMenu extends Activity implements Thread.UncaughtExceptionHandler {

    private static TaskExample task = new TaskExample();
    public static final boolean testingMode = false;

    //Bluetooth variables
    public static int monkeyId = -1;

    public static RewardSystem rewardSystem;

    //Permission variables
    private boolean permissions = false;
    String[] permissionCodes = {
        Manifest.permission.CAMERA,
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
        Manifest.permission.BLUETOOTH,
        Manifest.permission.BLUETOOTH_ADMIN,
        Manifest.permission.ACCESS_COARSE_LOCATION,
        Manifest.permission.WRITE_SETTINGS,
    };
    private Button[] permissionButtons = new Button[6];

    private static FaceRecog faceRecog;
    public static String message;
    private static Handler logHandler;
    private static HandlerThread logThread;
    private FragmentManager fragmentManager;
    private FragmentTransaction fragmentTransaction;

    @Override
    public void uncaughtException(Thread thread, Throwable throwable) {
        logHandler.post(new CrashReport(throwable));
        rewardSystem.quitBt();
        restartApp();
    }

    private void restartApp() {
        Intent intent=new Intent(getApplicationContext(), MainMenu.class);
        intent.putExtra("restart",true);
        final PendingIntent pendingIntent = PendingIntent.getActivity(
                getApplicationContext(),
                0, intent, PendingIntent.FLAG_ONE_SHOT);
        AlarmManager mgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        mgr.set(AlarmManager.RTC, System.currentTimeMillis() + 1000, pendingIntent);
        System.exit(2);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main_menu);

        initaliseRewardSystem();

        initialiseLayoutParameters();

        initialiseScreenSetttings();

        Thread t = new Thread(new Runnable() {
            public void run() {
                // Enable this to enable the facial recognition
                // Must have the corresponding .txt files present generated by the python ANN module
                // present in the Mymou folder in the root directory of the Android device
                //faceRecog = new FaceRecog();
            }
        });
        t.start();

        registerPowerReceivers();

        initialiseLogHandler();

        this.startLockTask();

        checkPermissions();

        fragmentManager = getFragmentManager();
        fragmentTransaction = fragmentManager.beginTransaction();

        checkIfCrashed();

        if(testingMode) {
            startTask();
        } else {
//            // Enable this if you want task to automatically restart on crash
//            Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
//                @Override
//                public void uncaughtException(Thread thread, Throwable throwable) {
//                    logHandler.post(new CrashReport(throwable));
//                    quitBt();
//                    restartApp();
//                }
//            });
        }
    }

    private void initialiseLogHandler() {
        logThread = new HandlerThread("LogBackground");
        logThread.start();
        logHandler = new Handler(logThread.getLooper());
    }

    private void initaliseRewardSystem() {
        rewardSystem = new RewardSystem(this, task);  // Initialises on main thread
        if (rewardSystem.bluetoothConnection) {
            TextView tv1 = (TextView) findViewById(R.id.tvBluetooth);
            Button buttonStart = (Button) findViewById(R.id.buttonStart);
            tv1.setText("Bluetooth status: Connected");
            buttonStart.setText("START TASK");
        }
    }

    private void checkIfCrashed() {
        Bundle extras = getIntent().getExtras();
        if(extras !=null) {
            if (extras.getBoolean("restart")) {
                //If crashed then restart task
                if(!rewardSystem.bluetoothConnection) {
                    rewardSystem.reconnectBluetooth();
                }
                startTask();
            }
        }
    }

    private void registerPowerReceivers() {
        IntentFilter unplugIntent = new IntentFilter(Intent.ACTION_POWER_DISCONNECTED);
        IntentFilter plugIntent = new IntentFilter(Intent.ACTION_POWER_CONNECTED);
        registerReceiver(powerPlugReceiver, plugIntent);
        registerReceiver(powerUnplugReceiver, unplugIntent);
    }

    private final BroadcastReceiver powerPlugReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if(action.equals(Intent.ACTION_POWER_CONNECTED)) {
                // Do something when power connected
                //task.enableApp();
            }
        }
    };

    private final BroadcastReceiver powerUnplugReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if(action.equals(Intent.ACTION_POWER_DISCONNECTED)) {
                // Do something when power disconnected
                //task.disableApp();
            }
        }
    };


    private void checkPermissions() {
        // Check if all permissions granted
        boolean permissionFlag = true;
        for (int i = 0; i < permissionCodes.length; i++){
            if(!checkPermissionNested(i)) {
                permissionFlag = false;
                break;
            }
        }
        if(permissionFlag) {
            View layout = findViewById(R.id.layoutCoveringUi);
            layout.setVisibility(View.INVISIBLE);
            permissions = true;
        }
    }

    private boolean checkPermissionNested(int i_perm) {
        final String permissionItem = permissionCodes[i_perm];
        int hasPermission=-1;
        if (i_perm<5) {
            hasPermission = checkSelfPermission(permissionItem);
        } else {
            if (Settings.System.canWrite(this)) {
                hasPermission = PackageManager.PERMISSION_GRANTED;
            }
        }
        if (hasPermission != PackageManager.PERMISSION_GRANTED) {
            if (!shouldShowRequestPermissionRationale(permissionItem)) {
                Toast.makeText(this, "All permissions must be enabled before app can run", Toast.LENGTH_LONG).show();
                requestPermissionLocal(i_perm);
                return false;
            }
            requestPermissionLocal(i_perm);
            return false;
        } else {
            permissionButtons[i_perm].setText("Granted");
            return true;
        }
    }

    private void requestPermissionLocal(int i_perm){
        if (i_perm==5) {  // This one is handled differently
            Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS);
            intent.setData(Uri.parse("package:" + this.getPackageName()));
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            this.startActivity(intent);
        } else {
            requestPermissions(new String[] {permissionCodes[i_perm]},123);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if(grantResults.length > 0) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "Permission enabled", Toast.LENGTH_SHORT).show();
                checkPermissions();
            } else {
                // Permission Denied
                Toast.makeText(this, "Permission denied, all permissions must be enabled before app can run", Toast.LENGTH_LONG).show();
            }
        }
    }

    private void initialiseLayoutParameters() {
        //Permission buttons
        permissionButtons[0] = (Button) findViewById(R.id.permbuttonCamera);
        permissionButtons[1] = (Button) findViewById(R.id.permbuttonWrite);
        permissionButtons[2] = (Button) findViewById(R.id.permbuttonBt0);
        permissionButtons[3] = (Button) findViewById(R.id.permbuttonBt1);
        permissionButtons[4] = (Button) findViewById(R.id.permbuttonBt2);
        permissionButtons[5] = (Button) findViewById(R.id.permbuttonSettings);

        findViewById(R.id.mainPermButton).setOnClickListener(buttonClickListener);
        for (int i = 0; i < permissionButtons.length; i++) {
            permissionButtons[i].setOnClickListener(buttonClickListener);
        }
        findViewById(R.id.buttonStart).setOnClickListener(buttonClickListener);

        initialiseToggleButtons();
    }

    private void initialiseToggleButtons() {
        CompoundButton.OnCheckedChangeListener multiListener = new CompoundButton.OnCheckedChangeListener() {

            public void onCheckedChanged(CompoundButton v, boolean isChecked) {
                int chan = -1;
                switch (v.getId()){
                    case R.id.chanZeroButt:
                        chan = 0;
                        break;
                    case R.id.chanOneButt:
                        chan = 1;
                        break;
                    case R.id.chanTwoButt:
                        chan = 2;
                        break;
                    case R.id.chanThreeButt:
                        chan = 3;
                        break;
                }
                if (isChecked) {
                    rewardSystem.startChannel(chan);
                } else {
                    rewardSystem.stopChannel(chan);
                }                }
        };

        ((ToggleButton)  findViewById(R.id.chanZeroButt)).setOnCheckedChangeListener(multiListener);
        ((ToggleButton)  findViewById(R.id.chanOneButt)).setOnCheckedChangeListener(multiListener);
        ((ToggleButton)  findViewById(R.id.chanTwoButt)).setOnCheckedChangeListener(multiListener);
        ((ToggleButton)  findViewById(R.id.chanThreeButt)).setOnCheckedChangeListener(multiListener);
    }

    public static void setMonkeyId(int[] intArray) {
        if (faceRecog != null) {
            monkeyId = faceRecog.idImage(intArray);
        }
    }

    public static void commitTrialData(ArrayList<String> trialData, int outcome, int rewardChosen) {
        if (trialData != null) {
            int length = trialData.size();
            for (int i = 0; i < length; i++) {
                String s = trialData.get(i);
                s = s + ',' + outcome + "," + rewardChosen + ',' + monkeyId;
                logHandler.post(new LogEvent(s));
                Log.d("log", s);
            }
        }
    }

    private void initialiseScreenSetttings() {
        this.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        final View decorView = MainMenu.this.getWindow().getDecorView();
        decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                | View.SYSTEM_UI_FLAG_FULLSCREEN
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | View.SYSTEM_UI_FLAG_IMMERSIVE
                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
    }

    public static void shutdownLoop() {
        final Calendar c = Calendar.getInstance();
        int hour = c.get(Calendar.HOUR);
        int AMPM = c.get(Calendar.AM_PM);
        if (hour >= 7 && AMPM == Calendar.PM) {
            task.enableApp(false);
            boolean restartNextDay = true;
            if(restartNextDay) {
                int day = c.get(Calendar.DAY_OF_WEEK);
                if (day == Calendar.THURSDAY | day == Calendar.FRIDAY | day == Calendar.SATURDAY) {
                    startupLoop();
                }
            }
        } else {
            Handler handlerOne = new Handler();
            handlerOne.postDelayed(new Runnable() {
                @Override
                public void run() {
                    shutdownLoop();
                }
            }, 60000);
        }
    }

    private static void startupLoop() {
        Calendar c = Calendar.getInstance();
        int hour = c.get(Calendar.HOUR);
        int AMPM = c.get(Calendar.AM_PM);
        if (hour >= 7 && AMPM == Calendar.AM) {
                task.enableApp(true);
                shutdownLoop();
        } else {
            Handler handlerOne = new Handler();
            handlerOne.postDelayed(new Runnable() {
                @Override
                public void run() {
                    startupLoop();
                }
            }, 60000);
        }
    }

    private void startTask() {
        setContentView(R.layout.activity_all_tasks);
        CameraMain cM = new CameraMain();
        fragmentTransaction.add(R.id.container, cM);
        fragmentTransaction.add(R.id.container, task);
        fragmentTransaction.commit();
    }


    private View.OnClickListener buttonClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.buttonStart:
                    startTask();
                    break;
                case R.id.mainPermButton:
                    checkPermissions();
                    break;
                case R.id.permbuttonCamera:
                    checkPermissionNested(0);
                    break;
                case R.id.permbuttonWrite:
                    checkPermissionNested(1);
                    break;
                case R.id.permbuttonBt0:
                    checkPermissionNested(2);
                    break;
                case R.id.permbuttonBt1:
                    checkPermissionNested(3);
                    break;
                case R.id.permbuttonBt2:
                    checkPermissionNested(4);
                    break;
                case R.id.permbuttonSettings:
                    checkPermissionNested(5);
                    break;
            }
        }
    };

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d("stop","stopped");
        if(permissions) {
            rewardSystem.quitBt();
            unregisterReceivers();
            quitThreads();
            this.stopLockTask();
        }
    }

    private void quitThreads() {
        try {
            logThread.quitSafely();
            logThread.join();
            logThread = null;
            logHandler = null;
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (NullPointerException e) {

        }
    }

    private void unregisterReceivers() {
        try {
            unregisterReceiver(powerPlugReceiver);
            unregisterReceiver(powerUnplugReceiver);
        } catch(IllegalArgumentException e) {
        }
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return false;
    }

    @Override
    public boolean onPrepareOptionsMenu (Menu menu) {
        return false;
    }

}
